generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Access {
  alias         String?
  createdAt     DateTime @default(now())
  granteeUserId String?
  id            String   @id @default(uuid())
  updatedAt     DateTime @updatedAt
  userId        String
  GranteeUser   User?    @relation("accessGet", fields: [granteeUserId], references: [id])
  User          User     @relation("accessGive", fields: [userId], references: [id])
}

model Account {
  accountType         AccountType?
  balance             Float            @default(0)
  createdAt           DateTime         @default(now())
  currency            String?
  id                  String           @default(uuid())
  isDefault           Boolean          @default(false)
  isExcluded          Boolean          @default(false)
  name                String?
  platformId          String?
  institutionId       String?
  plaidTokenId        Int?
  account_id          String?
  verification_status String?
  updatedAt           DateTime         @updatedAt
  userId              String
  accountSubTypeId    Int?
  AccountSubTypes     AccountSubTypes? @relation(fields: [accountSubTypeId], references: [id])
  Platform            Platform?        @relation(fields: [platformId], references: [id])
  Institution         Institution?     @relation(fields: [institutionId], references: [id])
  PlaidToken          PlaidToken?      @relation(fields: [plaidTokenId], references: [id])
  User                User             @relation(fields: [userId], references: [id])
  Order               Order[]
  PlaidHoldings       PlaidHoldings[]

  @@id([id, userId])
}

model Analytics {
  activityCount Int      @default(0)
  updatedAt     DateTime @updatedAt
  userId        String   @id
  User          User     @relation(fields: [userId], references: [id])
}

model AuthDevice {
  createdAt           DateTime @default(now())
  credentialId        Bytes
  credentialPublicKey Bytes
  counter             Int
  id                  String   @id @default(uuid())
  updatedAt           DateTime @updatedAt
  userId              String
  User                User     @relation(fields: [userId], references: [id])
}

model MarketData {
  createdAt   DateTime   @default(now())
  dataSource  DataSource
  date        DateTime
  id          String     @id @default(uuid())
  symbol      String
  marketPrice Float

  @@unique([date, symbol])
  @@index([symbol])
}

model Order {
  accountId                String?
  accountUserId            String?
  comment                  String?
  createdAt                DateTime      @default(now())
  date                     DateTime
  fee                      Float
  id                       String        @id @default(uuid())
  isDraft                  Boolean       @default(false)
  quantity                 Float
  dividendpershare_at_cost Float?
  symbolProfileId          String?
  transactionId            String?
  type                     Type
  subtype                  Int?   
  unitPrice                Float
  updatedAt                DateTime      @updatedAt
  userId                   String
  Account                  Account?      @relation(fields: [accountId, accountUserId], references: [id, userId])
  SymbolProfile            SymbolProfile? @relation(fields: [symbolProfileId], references: [id])
  User                     User          @relation(fields: [userId], references: [id])
  tags                     Tag[]

  @@unique([transactionId, userId])
}

model Platform {
  id              String            @id @default(uuid())
  name            String?
  platformType    String?
  url             String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  Account         Account[]
  Institution     Institution[]
  ThirdPartyCreds ThirdPartyCreds[]
}

model Property {
  key   String @id
  value String
}

model Settings {
  settings  Json?
  updatedAt DateTime @updatedAt
  userId    String   @id
  User      User     @relation(fields: [userId], references: [id])
}

model SymbolProfile {
  assetClass             AssetClass?
  assetSubClass          AssetSubClass?
  countries              Json?
  createdAt              DateTime                @default(now())
  currency               String
  dataSource             DataSource
  dataSource2            Json?
  dividend               Int?                    @default(0)
  dividend_period        String?
  dividendpershare       Float?
  dividendpershare_type  Int?
  id                     String                  @id @default(uuid())
  name                   String?
  updatedAt              DateTime                @updatedAt
  scraperConfiguration   Json?
  sectors                Json?
  symbol                 String
  symbolMapping          Json?
  url                    String?
  Order                  Order[]
  SymbolProfileOverrides SymbolProfileOverrides?
  PlaidHoldings          PlaidHoldings[]

  @@unique([dataSource, symbol])
}

model SymbolProfileOverrides {
  assetClass      AssetClass?
  assetSubClass   AssetSubClass?
  countries       Json?          @default("[]")
  name            String?
  sectors         Json?          @default("[]")
  url             String?
  symbolProfileId String         @id
  updatedAt       DateTime       @updatedAt
  SymbolProfile   SymbolProfile  @relation(fields: [symbolProfileId], references: [id])
}

model Subscription {
  createdAt DateTime @default(now())
  expiresAt DateTime
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  userId    String
  User      User     @relation(fields: [userId], references: [id])
}

model Tag {
  id     String  @id @default(uuid())
  name   String  @unique
  orders Order[]
}

model User {
  accessToken     String?
  authChallenge   String?
  createdAt       DateTime          @default(now())
  id              String            @id @default(uuid())
  provider        Provider          @default(ANONYMOUS)
  role            Role              @default(USER)
  thirdPartyId    String?
  updatedAt       DateTime          @updatedAt
  Access          Access[]          @relation("accessGet")
  AccessGive      Access[]          @relation("accessGive")
  Account         Account[]
  Analytics       Analytics?
  AuthDevice      AuthDevice[]
  Order           Order[]
  Settings        Settings?
  Subscription    Subscription[]
  ThirdPartyCreds ThirdPartyCreds[]
  PlaidToken      PlaidToken[]
}

model Institution {
  id                  String       @id @default(uuid())
  institutionName     String
  logo                String?
  institutionUrl      String
  institutionUniqueId String       @unique
  platformId          String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  Account             Account[]
  Platform            Platform?    @relation(fields: [platformId], references: [id])
  PlaidToken          PlaidToken[]
}

model AccountSubTypes {
  id                  Int           @id @default(autoincrement())
  accountSubTypeName  String?
  plaidAccountSubtype String?
  plaidAccountType    String?
  accountTypeId       Int
  AccountTypes        AccountTypes? @relation(fields: [accountTypeId], references: [id])
  country             String?
  Account             Account[]
}

model AccountTypes {
  id              Int               @id @default(autoincrement())
  accountTypeName AccountType
  show            Boolean?
  AccountSubTypes AccountSubTypes[]
}

model ActivityType {
  id   Int    @id @default(autoincrement())
  type String @unique
}

model ActivitySubType {
  id      Int    @id @default(autoincrement())
  subtype String
  type    String
  typeId  Int
}

model ThirdPartyCreds {
  id          Int       @id @default(autoincrement())
  publicToken String?
  accessToken String?
  tokenStatus String?
  userId      String?
  platformId  String?
  User        User?     @relation(fields: [userId], references: [id])
  Platform    Platform? @relation(fields: [platformId], references: [id])
}

model PlaidToken {
  id                  Int             @id @default(autoincrement())
  userId              String
  institutionUniqueId String
  accessToken         String
  publicToken         String
  itemId              String?
  PlaidMessages       PlaidMessages[]
  User                User            @relation(fields: [userId], references: [id])
  Institution         Institution     @relation(fields: [institutionUniqueId], references: [institutionUniqueId])
  Account             Account[]
}

model PlaidMessages {
  id                         Int         @id @default(autoincrement())
  item_Login_Required_Status Boolean     @default(false)
  itemId                     String?
  PlaidToken                 PlaidToken? @relation(fields: [plaidTokenId], references: [id])
  plaidTokenId               Int?
}

model DividendData {
  id               String     @id @default(uuid())
  createdAt        DateTime   @default(now())
  dataSource       DataSource
  symbol           String
  date             DateTime
  declarationDate  DateTime?
  paymentDate      DateTime?
  recordDate       DateTime?
  value            Float
  unadjusted_value Float
  currency         String

  @@unique([date, symbol])
  @@index([symbol])
}

model SplitData {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  dataSource DataSource
  symbol     String
  split      String?
  date       DateTime?

  @@unique([date, symbol])
  @@index([symbol])
}

model PlaidHoldings {
  id                 String         @id @default(uuid())
  createdAt          DateTime       @default(now())
  accountId          String?
  Account            Account?       @relation(fields: [accountId, accountUserId], references: [id, userId])
  accountUserId      String?
  lastUpdated        DateTime?
  symbol             String?
  name               String?
  symbolProfileId    String?
  SymbolProfile      SymbolProfile? @relation(fields: [symbolProfileId], references: [id])
  security_id        String?
  currency           String?
  quantity           Float?
  cost_basis         Float?
  is_cash_equivalent Boolean?

  @@unique([accountId, security_id])
}

enum AccountType {
  CASH
  SECURITIES
  LOAN
  CREDIT
  HOLDING_COMPANY
  OTHER
}

enum AssetClass {
  CASH
  COMMODITY
  EQUITY
  FIXED_INCOME
  REAL_ESTATE
}

enum AssetSubClass {
  BOND
  COMMODITY
  CRYPTOCURRENCY
  ETF
  MUTUALFUND
  PRECIOUS_METAL
  PRIVATE_EQUITY
  STOCK
}

enum DataSource {
  ALPHA_VANTAGE
  EOD_HISTORICAL_DATA
  GHOSTFOLIO
  GOOGLE_SHEETS
  MANUAL
  RAKUTEN
  YAHOO
  RAPID_API
}

enum ViewMode {
  DEFAULT
  ZEN
}

enum Provider {
  ANONYMOUS
  GOOGLE
  INTERNET_IDENTITY
}

enum Role {
  ADMIN
  DEMO
  USER
}

enum Type {
  BUY
  DIVIDEND
  ITEM
  SELL
  TAX
  FEES
  CANCEL
  TRANSFER
  CASH
}
